import { Component, createMemo, onMount } from 'solid-js'
import { createStore, produce } from "solid-js/store"
import Board from './components/Board'
import { delay, last } from './util'
import { computerMove, erdosTable } from './erdos'
import { Config, getThreats, hasWon, newState } from './model'
import NewGame from './components/NewGame'
import Info from './components/Info'
import Rules from './components/Rules'
import Credits from './components/Credits'

App: Component := () =>
  let dialog!: HTMLDialogElement
  let moveAudio!: HTMLAudioElement
  [state, setState] := createStore(newState())
  threats := createMemo =>
    getThreats(state.config.width, state.config.height, state.board, state.config.alignment, 3 - state.turn)

  play := async (i: number) =>
    width := state.config.width
    height := state.config.height
    let table: number[]
    if state.isThinking || state.outcome || state.board[i] !== 0
      return
    moveAudio.play()
    setState produce (state) =>
      state.board[i] = state.turn
      state.played.push i
      let won = hasWon(width, height, state.board, state.config.alignment, state.turn, i)
      if won
        state.outcome = won
        state.turn = 3 - state.turn
        return
      if state.played.length === state.config.width * state.config.height
        state.outcome = { color: 0, alignment: [0, 0] }
        state.turn = 3 - state.turn
        return
      state.turn = 3 - state.turn
      if state.config.adversary !== 'human'
        state.isThinking = true
        table = erdosTable(state.config.width, state.config.height, [...state.board], state.config.alignment, state.turn)
        state.scores = table

    if !state.outcome && state.config.adversary !== 'human'
      await delay 1500
      setState produce (state) =>
        let j = computerMove table
        moveAudio.play()
        state.board[j] = state.turn
        state.played.push j
        state.scores = null
        won := hasWon(width, height, state.board, state.config.alignment, state.turn, j)
        if won
          state.outcome = won
        else if state.played.length === state.config.width * state.config.height
          state.outcome = { color: 0, alignment: [0, 0] }
        state.turn = 3 - state.turn
        state.isThinking = false

  undo := =>
    if state.isThinking
      return
    setState produce (state) =>
      if state.played.length
        move := state.played.pop()
        state.board[move!] = 0
        state.turn = 3 - state.turn
        state.outcome = null
      if state.played.length % 2 === 1 && state.config.adversary !== 'human'
        move := state.played.pop()
        state.board[move!] = 0
        state.turn = 3 - state.turn

  openNewGameDialog := =>
    setState "dialog", "newgame"
    dialog.showModal()

  openRulesDialog := =>
    setState "dialog", "rules"
    dialog.showModal()

  openCreditsDialog := =>
    setState "dialog", "credits"
    dialog.showModal()

  closeDialog := =>
    dialog.close()
    setState "dialog", null

  newGame := (config: Config) =>
    setState produce (state) =>
      state.config = { ...config }
      state.board = new Array(config.width * config.height)
      state.board.fill 0
      state.played = []
      state.outcome = null
      state.turn = 1
      state.isThinking = false
      state.dialog = null
    dialog.close()

  <audio src="./move.webm" preload="auto" ref={moveAudio} />
  <div class="relative w-screen min-h-screen z-20 bg-main bg-cover flex flew-row items-center justify-around portrait:flex-col">
    <div class="absolute bg-white w-full h-full opacity-30 z-10 pointer-events-none" />
    <div class="z-20 flex flex-col bg-wood p-6 border-2 border-black rounded-xl gap-4">
      <div class="text-4xl">Gomoku</div>
      <button class="btn" onClick={openNewGameDialog}>Nouvelle partie</button>
      <button class="btn" onClick={undo}>Annuler</button>
      <button class="btn" onClick={openRulesDialog}>Règles</button>
      <button class="btn" onClick={openCreditsDialog}>Crédits</button>
    <Board
      board={state.board}
      width={state.config.width}
      height={state.config.height}
      lastMove={last(state.played)}
      turn={state.turn}
      scores={state.scores}
      outcome={state.outcome}
      threats={threats()}
      canPlay={!state.isThinking && !state.outcome}
      play={play}
    />
    <Info
      multipleThreats={threats().length >= 2}
      outcome={state.outcome}
      turn={state.turn}
      isThinking={state.isThinking}
      adversary={state.config.adversary}
    />
  <dialog .dialog
    ref={dialog}
    onCancel={closeDialog}
    onClose={closeDialog}
  >
    {switch state.dialog
      "newgame"
        <NewGame
          config={state.config}
          closeDialog={closeDialog}
          newGame={newGame}
        />
      "rules"
        <Rules closeDialog={closeDialog} />
      "credits"
        <Credits closeDialog={closeDialog} />
      else
        null
    }

export default App