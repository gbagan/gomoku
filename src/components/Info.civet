import { Component, createMemo, createSignal, For, onMount } from "solid-js"
import { Transition } from "solid-transition-group"
import { Adversary, Outcome } from "../model.civet"
import { delay } from "../util.civet"
import Emph from "./Emph.civet"

type Message = (string | [string])[]

messages: [Message, number][] := [
  [["Bienvenue sur l'appli ", ["Gomoku"], "."], 3000]
  [[["Gomoku"], " connu aussi sous le nom de Darpion est un jeu positionnel japonais d'origine chinoise."], 5000]
  [["Il existe de nombreuses variantes: Libre, ", ["Renju"], ", ", ["Caro"], ", ", ["Omok"], ", ", ["Ninuki-renju"], "."], 5000]
]

type InfoComponent = Component<{
  multipleThreats: boolean
  outcome: Outcome
  turn: number
  isThinking: boolean
  adversary: Adversary
}>

Info: InfoComponent := (props) =>
  [periodicMessage, setPeriodicMessage] := createSignal<Message | null> null
  
  message := createMemo<Message | null> =>
    if props.outcome !== null
    then
      if props.outcome.color === 0
      then ["Match nul! Tu peux changer le niveau de difficulté en clickant sur ", ["Nouvelle partie"], "."]
      else if props.adversary === 'human'
      then [`Le joueur ${if props.outcome.color === 1 then "noir" else "blanc"} a gagné la partie. ",
            "Tu peux jouer contre l'IA en clickant sur `, ["Nouvelle partie"], "."]
      else if props.outcome.color === 1
      then ["Zut! J'ai perdu! Tu peux changer de difficulté en clickant sur ", ["Nouvelle partie"], "!"]
      else ["Oh oui! J'ai gagné! Tu peux changer de difficulté en clickant sur ", ["Nouvelle partie"], "!"]
    else if props.multipleThreats
    then [`Le joueur ${if props.turn === 1 then "blanc" else "noir"} a réussi une `, ["menace multiple"],
          ". Il peut gagner la partie quoique réponde l'adversaire."]
    else periodicMessage()

  girlExpression := createMemo =>
    if props.isThinking
    then "bg-thinking"
    else if props.outcome?.color === 1 && props.adversary !== 'human'
    then "bg-crying"
    else if props.outcome?.color === 2 || props.outcome?.color === 1 && props.adversary === 'human'
    then "bg-happy"
    else if props.multipleThreats || props.outcome?.color === 0
    then "bg-surprised"
    else "bg-speaking"

  onMount async =>
    i .= 0
    while true
      d := messages[i][1]
      setPeriodicMessage messages[i][0]
      await delay d
      setPeriodicMessage null
      i = (i + 1) % messages.length
      await delay 1500

  <div class=`relative w-[15rem] h-[25rem] bg-contain bg-no-repeat z-20 ${girlExpression()}`>
    <Transition
      onEnter={(el, done) =>
        a := el.animate [{ opacity: 0 }, { opacity: 1 }], {duration: 500}
        a.finished.then done
      }
      onExit={(el, done) =>
        a := el.animate [{ opacity: 1 }, { opacity: 0 }], {duration: 500}
        a.finished.then done
      }
    > {message() &&
        <div class="tooltip">
          <For each={message()}>{(m) => if typeof m === "string" then m else <Emph>{m[0]}}
      }

export default Info